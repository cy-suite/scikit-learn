{{py:

implementation_specific_values = [
    # Values are the following ones:
    #
    #       name_suffix, DistanceMetric, INPUT_DTYPE_t, INPUT_DTYPE
    #
    # We use DistanceMetric for float64 for backward naming compatibility.
    #
    ('64', 'DistanceMetric', 'cnp.float64_t', 'np.float64'),
    ('32', 'DistanceMetric32', 'cnp.float32_t', 'np.float32')
]

}}
cimport numpy as cnp

from ...utils._typedefs cimport SPARSE_INDEX_TYPE_t
from ...metrics._dist_metrics cimport DistanceMetric, DistanceMetric32

{{for name_suffix, DistanceMetric, INPUT_DTYPE_t, INPUT_DTYPE in implementation_specific_values}}


cdef class DatasetsPair{{name_suffix}}:
    cdef:
        {{DistanceMetric}} distance_metric
        np.intp_t n_features

    cdef cnp.intp_t n_samples_X(self) nogil

    cdef cnp.intp_t n_samples_Y(self) nogil

    cdef cnp.float64_t dist(self, cnp.intp_t i, cnp.intp_t j) nogil

    cdef cnp.float64_t surrogate_dist(self, cnp.intp_t i, cnp.intp_t j) nogil


cdef class DenseDenseDatasetsPair{{name_suffix}}(DatasetsPair{{name_suffix}}):
    cdef:
        const {{INPUT_DTYPE_t}}[:, ::1] X
        const {{INPUT_DTYPE_t}}[:, ::1] Y


cdef class SparseSparseDatasetsPair{{name_suffix}}(DatasetsPair{{name_suffix}}):
    cdef:
        const {{INPUT_DTYPE_t}}[:] X_data
        const SPARSE_INDEX_TYPE_t[:] X_indices
        const SPARSE_INDEX_TYPE_t[:] X_indptr

        const {{INPUT_DTYPE_t}}[:] Y_data
        const SPARSE_INDEX_TYPE_t[:] Y_indices
        const SPARSE_INDEX_TYPE_t[:] Y_indptr


cdef class SparseDenseDatasetsPair{{name_suffix}}(DatasetsPair{{name_suffix}}):
    cdef:
        const {{INPUT_DTYPE_t}}[:] X_data
        const SPARSE_INDEX_TYPE_t[:] X_indices
        const SPARSE_INDEX_TYPE_t[:] X_indptr

        const {{INPUT_DTYPE_t}}[:] Y_data
        const SPARSE_INDEX_TYPE_t[:] Y_indices
        cnp.intp_t n_Y


cdef class DenseSparseDatasetsPair{{name_suffix}}(DatasetsPair{{name_suffix}}):
    cdef:
        # As distance metrics are commutative, we can simply rely
        # on the implementation of SparseDenseDatasetsPair and
        # swap arguments.
        DatasetsPair{{name_suffix}} datasets_pair

{{endfor}}
