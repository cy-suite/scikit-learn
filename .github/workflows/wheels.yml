# Workflow to build and test wheels
name: Wheel builder

on:
  schedule:
    # Nightly build at 3:42 A.M.
    - cron: "42 3 */1 * *"
  push:
    branches:
      - main
      # Release branches
      - "[0-9]+.[0-9]+.X"
  pull_request:
    branches:
      - main
      - "[0-9]+.[0-9]+.X"
  # Manual run
  workflow_dispatch:

jobs:
  # Check whether to build the wheels and the source tarball
  check_build_trigger:
    name: Check build trigger
    runs-on: ubuntu-latest
    if: github.repository == 'scikit-learn/scikit-learn'
    outputs:
      build: ${{ steps.check_build_trigger.outputs.build }}

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: check_build_trigger
        name: Check build trigger
        run: bash build_tools/github/check_build_trigger.sh

  # Build the wheels for Linux, Windows and macOS for Python 3.7 and newer
  build_wheels:
    name: Build wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    needs: check_build_trigger
    if: needs.check_build_trigger.outputs.build

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python: [37, 38, 39, 310]
        bitness: [32, 64]
        manylinux_image: [manylinux1, manylinux2010, manylinux2014]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: windows-latest
            bitness: 64
            platform_id: win_amd64
          - os: windows-latest
            bitness: 32
            platform_id: win32
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            bitness: 32
            platform_id: manylinux_i686
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
        exclude:
          - os: macos-latest
            bitness: 32
          # Remove manylinux1 from the windows and osx build matrix since
          # manylinux_image is not used for these platforms
          - os: windows-latest
            manylinux_image: manylinux1
          - os: windows-latest
            manylinux_image: manylinux2010
          - os: macos-latest
            manylinux_image: manylinux1
          - os: macos-latest
            manylinux_image: manylinux2010
          # Remove manylinux2014 from ubuntu and Python 3.7, 3.8, 3.9
          - os: ubuntu-latest
            manylinux_image: manylinux2014
            python: 37
          - os: ubuntu-latest
            manylinux_image: manylinux2014
            python: 38
          - os: ubuntu-latest
            manylinux_image: manylinux2014
            python: 39
          # numpy on Python 3.10 does not support 32 bit
          - python: 310
            bitness: 32
          # numpy on Python 3.10 requires manylinux2014
          - python: 310
            manylinux_image: manylinux1
          - python: 310
            manylinux_image: manylinux2010
          # Include in build matrix once numpy/scipy supports osx and windows
          # Be sure to updated build_tools/github/check_wheels.py
          - python: 310
            os: macos-latest
          - python: 310
            os: windows-latest

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v1

  #     - name: Setup Python
  #       uses: actions/setup-python@v2

  #     # Comment out when numpy/scipy dependencies are on pypi
  #     - name: Set pypi index for python dev
  #       if: matrix.python == 310
  #       run: |
  #         echo "CIBW_ENVIRONMENT=PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scipy-wheels-nightly/simple PIP_PRE=true" >> $GITHUB_ENV

  #         # Do not use the dev version of pandas
  #         echo "PANDAS_VERSION_SPECIFIER=<1.4" >> $GITHUB_ENV

  #     - name: Build and test wheels
  #       env:
  #         CONFTEST_PATH: ${{ github.workspace }}/conftest.py
  #         CONFTEST_NAME: conftest.py
  #         CIBW_ENVIRONMENT: OMP_NUM_THREADS=2
  #                           OPENBLAS_NUM_THREADS=2
  #                           SKLEARN_SKIP_NETWORK_TESTS=1
  #                           SKLEARN_BUILD_PARALLEL=3
  #                           MACOSX_DEPLOYMENT_TARGET=10.13
  #                           ${{ env.CIBW_ENVIRONMENT }}
  #         CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
  #         CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
  #         CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
  #         CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
  #         CIBW_BEFORE_TEST_WINDOWS: bash build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
  #         CIBW_TEST_REQUIRES: pytest pandas${{ env.PANDAS_VERSION_SPECIFIER }} threadpoolctl
  #         CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh
  #         CIBW_TEST_COMMAND_WINDOWS: bash {project}/build_tools/github/test_windows_wheels.sh ${{ matrix.python }} ${{ matrix.bitness }}
  #         CIBW_BUILD_VERBOSITY: 1

  #       run: bash build_tools/github/build_wheels.sh

  #     - name: Store artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         path: wheelhouse/*.whl

  # # Build the source distribution under Linux
  # build_sdist:
  #   name: Source distribution
  #   runs-on: ubuntu-latest
  #   needs: check_build_trigger
  #   if: needs.check_build_trigger.outputs.build

  #   steps:
  #     - name: Checkout scikit-learn
  #       uses: actions/checkout@v1

  #     - name: Setup Python
  #       uses: actions/setup-python@v2

  #     - name: Build source distribution
  #       run: bash build_tools/github/build_source.sh
  #       env:
  #         SKLEARN_BUILD_PARALLEL: 3

  #     - name: Test source distribution
  #       run: bash build_tools/github/test_source.sh
  #       env:
  #         OMP_NUM_THREADS: 2
  #         OPENBLAS_NUM_THREADS: 2
  #         SKLEARN_SKIP_NETWORK_TESTS: 1

  #     - name: Store artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         path: dist/*.tar.gz

  # # Upload the wheels and the source distribution
  # upload_anaconda:
  #   name: Upload to Anaconda
  #   runs-on: ubuntu-latest
  #   needs: [build_wheels, build_sdist]
  #   # The artifacts cannot be uploaded on PRs
  #   if: github.event_name != 'pull_request'

  #   steps:
  #     - name: Checkout scikit-learn
  #       uses: actions/checkout@v1

  #     - name: Download artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: dist

  #     - name: Setup Python
  #       uses: actions/setup-python@v2

  #     - name: Upload artifacts
  #       env:
  #         # Secret variables need to be mapped to environment variables explicitly
  #         SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN }}
  #         SCIKIT_LEARN_STAGING_UPLOAD_TOKEN: ${{ secrets.SCIKIT_LEARN_STAGING_UPLOAD_TOKEN }}
  #       # Force a replacement if the remote file already exists
  #       run: bash build_tools/github/upload_anaconda.sh
