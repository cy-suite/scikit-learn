# Workflow to build and test wheels
name: Wheel builder

on:
  schedule:
    # Nightly build at 3:42 A.M.
    - cron: "42 3 */1 * *"
  push:
    tags:
      # Final releases, release candidates and post-releases build
      - "[0-9]+.[0-9]+.[0-9]+(rc[0-9]+)?(.post[0-9]+)?"
  pull_request:
    branches:
      - master
      - "[0-9]+.[0-9]+.X"

jobs:
  build_wheels:
    # TODO: Add a commit marker to trigger the build when it is needed
    name: Build wheels on ${{ matrix.os }} for Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}

    strategy:
      # Avoid that the wheel builder for a
      # runner is cancelled if other fails
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        # Build the wheels for Python 3.6 and newer
        python: [36, 37, 38]

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
    
      - name: Install dependencies
        run: |
          python -m pip install cibuildwheel

      - name: Build and test wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-*
          CIBW_TEST_REQUIRES: pytest pandas
          CIBW_TEST_COMMAND: pytest --pyargs sklearn.tree
          # Embed vcomp140.dll before generating the Windows
          # wheel and after building the package from source
          CIBW_BEFORE_BUILD_WINDOWS: pip install numpy scipy cython &&
                                     rm -rf build &&
                                     python setup.py build &&
                                     python build_tools/github/vendor_vcomp140.py
        run: |
          python -m cibuildwheel --output-dir wheelhouse
          ls -l .
          ls -l ./wheelhouse/
          ls -l ./wheelhouse/*.whl

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl 

  build_sdist:
    # TODO: Add a commit marker to trigger the build when it is needed
    name: Source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout scikit-learn
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2

      # The setup file and the tests need these dependencies to be installed
      - name: Install dependencies
        run: |
          python -m pip install numpy scipy cython
          python -m pip install twine
          python -m pip install pytest pandas

      - name: Build and test source distribution
        run: |
          python setup.py sdist
          ls -l dist/*.tar.gz
          twine check dist/*.tar.gz
          python -m pip install dist/*.tar.gz
          python setup.py build_ext -i
          pytest --pyargs sklearn

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.tar.gz

  upload_anaconda:
    name: Upload to Anaconda
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist]

    # The artifacts should not be uploaded on PRs
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Display artifacts
        run: |
          ls -l dist/*

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Upload artifacts
        env:
          # Secret variables need to be mapped to environment variables explicitly
          SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN }}
          SCIKIT_LEARN_STAGING_UPLOAD_TOKEN: ${{ secrets.SCIKIT_LEARN_STAGING_UPLOAD_TOKEN }}
        # Force a replacement if the remote file already exists
        run: |
          if [ "$GITHUB_EVENT_NAME" == "schedule" ]; then
            ANACONDA_ORG="scipy-wheels-nightly"
            ANACONDA_TOKEN="$SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN"
          else
            ANACONDA_ORG="scikit-learn-wheels-staging"
            ANACONDA_TOKEN="$SCIKIT_LEARN_STAGING_UPLOAD_TOKEN"
          fi
          conda install -q -y anaconda-client
          anaconda -t $ANACONDA_TOKEN upload --force -u $ANACONDA_ORG dist/*
          echo "Index: https://pypi.anaconda.org/$ANACONDA_ORG/simple"
