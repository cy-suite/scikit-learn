"""
=======================================================
Scalable learning with polynomial kernel aproximation
=======================================================

This example illustrates the use of :class:`PolynomialSampler` to efficiently
generate polynomial kernel feature-space approximations. This is used
to train linear classifiers that approximate the accuracy of kernelized ones.

.. currentmodule:: sklearn.kernel_approximation

We use the Covtype dataset [2]_, trying to reproduce the experiments on the
original paper of Tensor Sketch [1]_, i.e. the algorithm implemented by
:class:`PolynomialSampler`.

First, we compute the accuracy of a linear classifier on the original
features. Then, we train linear classifiers on different numbers of features
generated by :class:`PolynomialSampler`, approximating the accuracy of a
kernelized classifier in a scalable manner.
"""
print(__doc__)

# Author: Daniel Lopez-Sanchez <lope@usal.es>
# License: BSD 3 clause
from sklearn.datasets import fetch_covtype
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import normalize, MinMaxScaler
from sklearn.svm import LinearSVC
from sklearn.kernel_approximation import PolynomialSampler

##############################################################################
# Load the Covtype dataset and transform it into a binary classification
# problem to match the format of the dataset in the LIBSVM webpage
# [2]_.

data = fetch_covtype()
X, Y = data["data"], data["target"]

Y[Y != 2] = 0
Y[Y == 2] = 1

##############################################################################
# Here we select 20,000 samples for training and 20,000 for testing.
# To actually reproduce the results in the original Tensor Sketch paper,
# select 100,000.

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=20_000,
                                                    test_size=20000,
                                                    random_state=42)

##############################################################################
# Now scale features to the range [0, 1] to match the format of the dataset in
# the LIBSVM webpage, and then normalize to unit length as done in the
# original Tensor Sketch paper [1].

mm = MinMaxScaler().fit(X_train)
X_train = normalize(mm.transform(X_train))
X_test = normalize(mm.transform(X_test))

##############################################################################
# As a baseline, train a linear SVM on the original features and print the
# accuracy:

lsvm = LinearSVC()
lsvm.fit(X_train, Y_train)
print("Linear SVM score on raw features: %.2f %%"
      % (100*lsvm.score(X_test, Y_test)))

##############################################################################
# Then we train linear SVMs on various numbers of :class:`PolynomialSampler`
# features, showing that these features improve the accuracy of linear
# classification:

for n_components in [200, 500, 1000, 1500]:

    ps = PolynomialSampler(n_components=n_components,
                           degree=4).fit(X_train[0:1])
    X_train_ps = ps.transform(X_train)
    X_test_ps = ps.transform(X_test)

    lsvm = LinearSVC()
    lsvm.fit(X_train_ps, Y_train)
    print("Linear SVM score on %d PolynomialSampler " % n_components +
          "features: %.2f %%" % (100*lsvm.score(X_test_ps, Y_test)))

##############################################################################
# Finally, train a kernelized SVM to see how well :class:`PolynomialSampler`
# is approximating the performance of the kernel. This of course may take some
# time, as the SVC class has a relatively poor scalability. This is the
# reason why kernel approximators are so useful:

from sklearn.svm import SVC
ksvm = SVC(C=500., kernel="poly", degree=4, coef0=0,
           gamma=1.).fit(X_train, Y_train)
print("Kernel-SVM score on raw features: %.2f %%" %
      (100*ksvm.score(X_test, Y_test)))


##############################################################################
# References
# ==========
#
# [1] Pham, N., & Pagh, R. (2013, August). Fast and scalable polynomial
# kernels via explicit feature maps. In Proceedings of the 19th ACM SIGKDD
# international conference on Knowledge discovery and data mining (pp. 239-247)
# (https://chbrown.github.io/kdd-2013-usb/kdd/p239.pdf)
#
# [2] LIBSVM binary datasets repository
# (https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary.html)
