#!/usr/bin/env bash
set -e

help="Show the list of the files that may have changed
due to the modification of code.
Can also create a _changed.html file inside the build directory
in "doc/_build/html/stable".

The documentation needs to be built before this script is executed."
#
# The script can be either launched directly from the terminal:
# $> source build_tools/circle/print_changed_docfiles.sh
# Or from the doc folder with a make command
# $> make changed-from-master
#
# ARG_OPTIONAL_SINGLE([refbase],[],[The git ref base to compare],[origin/master])
# ARG_OPTIONAL_SINGLE([commit],[],[The SHA of the commit of reference, by default the current commit],[$(git log -n 1 --pretty=format:"%H")])
# ARG_OPTIONAL_BOOLEAN([writehtml],[],[If set, the html file _changed.html is written],[on])
#
# ARG_HELP([],[$help])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.3.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_refbase="origin/master"
_arg_commit="$(git log -n 1 --pretty=format:"%H")"
_arg_writehtml=on

print_help ()
{
	printf 'Usage: %s [--refbase <arg>] [--commit <arg>] [--(no-)writehtml] [-h|--help]\n' "$0"
	printf "\t%s\n" "--refbase: The git ref base to compare (default: '"origin/master"')"
	printf "\t%s\n" "--commit: The SHA of the commit of reference, by default the current commit (default: '"$(git log -n 1 --pretty=format:"%H")"')"
	printf "\t%s\n" "--writehtml,--no-writehtml: If set, the html file _changed.html is written (on by default)"
	printf "\t%s\n" "-h,--help: Prints help"
	printf "\n%s\n" "$help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		--refbase|--refbase=*)
			_val="${_key##--refbase=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_refbase="$_val"
			;;
		--commit|--commit=*)
			_val="${_key##--commit=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_commit="$_val"
			;;
		--no-writehtml|--writehtml)
			_arg_writehtml="on"
			test "${1:0:5}" = "--no-" && _arg_writehtml="off"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
			;;
	esac
	shift
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])

# Get the git root directory
sklearn_root=$(git rev-parse --show-toplevel)

if [ ! -d "$sklearn_root/doc/_build/html/stable" ]
then
    echo "The folder \"doc/_build/html/stable\" does not exist."
    echo "You need to build the documentation first."
    exit
fi

affected_doc_paths() {
	files=$(git diff --name-only $_arg_refbase...$_arg_commit)
	echo "$files" | grep ^doc/.*\.rst | sed 's/^doc\/\(.*\)\.rst$/\1.html/'
	echo "$files" | grep ^examples/.*.py | sed 's/^\(.*\)\.py$/auto_\1.html/'
	sklearn_files=$(echo "$files" | grep '^sklearn/')
	if [ -n "$sklearn_files" ]
	then
		grep -hlR -f<(echo "$sklearn_files" | sed 's/^/scikit-learn\/blob\/[a-z0-9]*\//') $sklearn_root/doc/_build/html/stable/modules/generated | awk -F"stable/" '{print $2}'
	fi
}

write_html_file() {
    if [ -n "$affected" ]
    then
        echo "Files modificated found and written in _build/html/stable/_changed.html"
        (
        echo '<html><body><ul>'
        echo "$affected" | sed 's|.*|<li><a href="&">&</a></li>|'
        echo '</ul></body></html>'
        ) > $sklearn_root'/doc/_build/html/stable/_changed.html'
    else
        echo 'No file modificated found in the documentation.'
        (
        echo '<html><body>'
        echo 'No file modificated found in the documentation.'
        echo '</body></html>'
        ) > $sklearn_root'/doc/_build/html/stable/_changed.html'
    fi
    echo "The _changed.html file is written."
}

affected=$(affected_doc_paths)
if [ "$_arg_writehtml" = on ]
then
    write_html_file
    echo "The following documentation files may have been changed by commit $_arg_commit:"
fi
echo "$affected"
