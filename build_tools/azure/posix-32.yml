parameters:
  name: ''
  vmImage: ''
  matrix: []

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  variables:
    TEST_DIR: '$(Agent.WorkFolder)/tmp_folder'
    VIRTUALENV: 'testvenv'
    JUNITXML: 'test-data.xml'
    OMP_NUM_THREADS: '4'
    OPENBLAS_NUM_THREADS: '4'
    SKLEARN_SKIP_NETWORK_TESTS: '1'
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
    - script: >
        docker container run -it --rm
        -v $TEST_DIR:/temp_dir
        -v $PWD:/io
        --name skcontainer
        -e DISTRIB='ubuntu-32'
        -w /io
        i386/ubuntu:16.04
        sleep 1000000
      displayName: 'Start up'
    - script: >
      docker exec -ti skcontainer ./build_tools/azure/install.sh
      displayName: 'Install'
    - script: >
        docker container stop skcontainer
      displayName: 'Stop container'
      condition: always()
    # - script: |
    #     build_tools/azure/test_script.sh
    #   displayName: 'Test Library'
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFiles: '$(TEST_DIR)/$(JUNITXML)'
    #     testRunTitle: ${{ format('{0}-$(Agent.JobName)', parameters.name) }}
    #   displayName: 'Publish Test Results'
    #   condition: succeededOrFailed()
    # - script: |
    #     build_tools/azure/upload_codecov.sh
    #   condition: and(succeeded(), eq(variables['COVERAGE'], 'true'), eq(variables['DISTRIB'], 'conda'))
    #   displayName: 'Upload To Codecov'
    #   env:
    #     CODECOV_TOKEN: $(CODECOV_TOKEN)
